//
// Generated By:JAX-WS RI IBM 2.2.1-11/30/2010 12:42 PM(foreman)- (JAXB RI IBM 2.2.3-11/28/2011 06:21 AM(foreman)-)
//


package com.ibm.itim.ws.services;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import com.ibm.itim.ws.model.WSAccount;
import com.ibm.itim.ws.model.WSAttribute;
import com.ibm.itim.ws.model.WSOrganizationalContainer;
import com.ibm.itim.ws.model.WSPerson;
import com.ibm.itim.ws.model.WSRequest;
import com.ibm.itim.ws.model.WSRole;
import com.ibm.itim.ws.model.WSService;
import com.ibm.itim.ws.model.WSSession;

@WebService(name = "WSPersonService", targetNamespace = "http://services.ws.itim.ibm.com")
@XmlSeeAlso({
    com.ibm.itim.ws.exceptions.ObjectFactory.class,
    com.ibm.itim.ws.model.ObjectFactory.class,
    com.ibm.itim.ws.services.ObjectFactory.class
})
public interface WSPersonService {


    /**
     * 
     * @param roleDN
     * @param session
     * @param date
     * @param personDN
     * @return
     *     returns com.ibm.itim.ws.model.WSRequest
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "addRoleReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "addRole", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.AddRole")
    @ResponseWrapper(localName = "addRoleResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.AddRoleResponse")
    public WSRequest addRole(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "roleDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String roleDN,
        @WebParam(name = "date", targetNamespace = "http://services.ws.itim.ibm.com")
        XMLGregorianCalendar date)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param roleDNs
     * @param session
     * @param date
     * @param personDN
     * @return
     *     returns com.ibm.itim.ws.model.WSRequest
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "addRolesToPersonReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "addRolesToPerson", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.AddRolesToPerson")
    @ResponseWrapper(localName = "addRolesToPersonResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.AddRolesToPersonResponse")
    public WSRequest addRolesToPerson(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "roleDNs", targetNamespace = "http://services.ws.itim.ibm.com")
        List<String> roleDNs,
        @WebParam(name = "date", targetNamespace = "http://services.ws.itim.ibm.com")
        XMLGregorianCalendar date)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param wsPerson
     * @param wsContainer
     * @param session
     * @param date
     * @return
     *     returns com.ibm.itim.ws.model.WSRequest
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "createPersonReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "createPerson", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.CreatePerson")
    @ResponseWrapper(localName = "createPersonResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.CreatePersonResponse")
    public WSRequest createPerson(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "wsContainer", targetNamespace = "http://services.ws.itim.ibm.com")
        WSOrganizationalContainer wsContainer,
        @WebParam(name = "wsPerson", targetNamespace = "http://services.ws.itim.ibm.com")
        WSPerson wsPerson,
        @WebParam(name = "date", targetNamespace = "http://services.ws.itim.ibm.com")
        XMLGregorianCalendar date)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param session
     * @param date
     * @param personDN
     * @return
     *     returns com.ibm.itim.ws.model.WSRequest
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "deletePersonReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "deletePerson", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.DeletePerson")
    @ResponseWrapper(localName = "deletePersonResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.DeletePersonResponse")
    public WSRequest deletePerson(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "date", targetNamespace = "http://services.ws.itim.ibm.com")
        XMLGregorianCalendar date)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param session
     * @param personDN
     * @return
     *     returns java.util.List<com.ibm.itim.ws.model.WSAccount>
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "getAccountsByOwnerReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "getAccountsByOwner", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetAccountsByOwner")
    @ResponseWrapper(localName = "getAccountsByOwnerResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetAccountsByOwnerResponse")
    public List<WSAccount> getAccountsByOwner(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN)
        throws WSApplicationException
    ;

    /**
     * 
     * @param wsContainer
     * @param session
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "getAuthorizedPersonProfilesForCreateReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "getAuthorizedPersonProfilesForCreate", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetAuthorizedPersonProfilesForCreate")
    @ResponseWrapper(localName = "getAuthorizedPersonProfilesForCreateResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetAuthorizedPersonProfilesForCreateResponse")
    public List<String> getAuthorizedPersonProfilesForCreate(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "wsContainer", targetNamespace = "http://services.ws.itim.ibm.com")
        WSOrganizationalContainer wsContainer)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param session
     * @param personDN
     * @return
     *     returns java.util.List<com.ibm.itim.ws.model.WSService>
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "getAuthorizedServicesReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "getAuthorizedServices", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetAuthorizedServices")
    @ResponseWrapper(localName = "getAuthorizedServicesResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetAuthorizedServicesResponse")
    public List<WSService> getAuthorizedServices(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param filterAttribute
     * @param session
     * @param personDN
     * @return
     *     returns java.util.List<com.ibm.itim.ws.model.WSAccount>
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "getFilteredAccountsByOwnerReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "getFilteredAccountsByOwner", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetFilteredAccountsByOwner")
    @ResponseWrapper(localName = "getFilteredAccountsByOwnerResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetFilteredAccountsByOwnerResponse")
    public List<WSAccount> getFilteredAccountsByOwner(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "filterAttribute", targetNamespace = "http://services.ws.itim.ibm.com")
        WSAttribute filterAttribute)
        throws WSApplicationException
    ;

    /**
     * 
     * @param filterAttribute
     * @param session
     * @param personDN
     * @return
     *     returns java.util.List<com.ibm.itim.ws.model.WSService>
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "getFilteredAuthorizedServicesReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "getFilteredAuthorizedServices", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetFilteredAuthorizedServices")
    @ResponseWrapper(localName = "getFilteredAuthorizedServicesResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetFilteredAuthorizedServicesResponse")
    public List<WSService> getFilteredAuthorizedServices(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "filterAttribute", targetNamespace = "http://services.ws.itim.ibm.com")
        WSAttribute filterAttribute)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param session
     * @param personDN
     * @return
     *     returns java.util.List<com.ibm.itim.ws.model.WSRole>
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "getPersonRolesReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "getPersonRoles", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetPersonRoles")
    @ResponseWrapper(localName = "getPersonRolesResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetPersonRolesResponse")
    public List<WSRole> getPersonRoles(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param session
     * @return
     *     returns com.ibm.itim.ws.model.WSPerson
     * @throws WSInvalidSessionException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "getPrincipalPersonReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "getPrincipalPerson", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetPrincipalPerson")
    @ResponseWrapper(localName = "getPrincipalPersonResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.GetPrincipalPersonResponse")
    public WSPerson getPrincipalPerson(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session)
        throws WSApplicationException, WSInvalidSessionException
    ;

    /**
     * 
     * @param session
     * @return
     *     returns boolean
     * @throws WSUnsupportedVersionException
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "isCreatePersonAllowedReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "isCreatePersonAllowed", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.IsCreatePersonAllowed")
    @ResponseWrapper(localName = "isCreatePersonAllowedResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.IsCreatePersonAllowedResponse")
    public boolean isCreatePersonAllowed(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session)
        throws WSApplicationException, WSLoginServiceException, WSUnsupportedVersionException
    ;

    /**
     * 
     * @param roleDN
     * @param session
     * @param personDN
     * @return
     *     returns boolean
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "isMemberOfRoleReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "isMemberOfRole", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.IsMemberOfRole")
    @ResponseWrapper(localName = "isMemberOfRoleResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.IsMemberOfRoleResponse")
    public boolean isMemberOfRole(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "roleDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String roleDN)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param session
     * @param personDN
     * @return
     *     returns com.ibm.itim.ws.model.WSPerson
     * @throws WSInvalidSessionException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "lookupPersonReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "lookupPerson", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.LookupPerson")
    @ResponseWrapper(localName = "lookupPersonResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.LookupPersonResponse")
    public WSPerson lookupPerson(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN)
        throws WSApplicationException, WSInvalidSessionException
    ;

    /**
     * 
     * @param wsAttrs
     * @param session
     * @param date
     * @param personDN
     * @return
     *     returns com.ibm.itim.ws.model.WSRequest
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "modifyPersonReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "modifyPerson", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.ModifyPerson")
    @ResponseWrapper(localName = "modifyPersonResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.ModifyPersonResponse")
    public WSRequest modifyPerson(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "wsAttrs", targetNamespace = "http://services.ws.itim.ibm.com")
        List<WSAttribute> wsAttrs,
        @WebParam(name = "date", targetNamespace = "http://services.ws.itim.ibm.com")
        XMLGregorianCalendar date)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param roleDN
     * @param session
     * @param date
     * @param personDN
     * @return
     *     returns com.ibm.itim.ws.model.WSRequest
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "removeRoleReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "removeRole", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.RemoveRole")
    @ResponseWrapper(localName = "removeRoleResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.RemoveRoleResponse")
    public WSRequest removeRole(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "roleDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String roleDN,
        @WebParam(name = "date", targetNamespace = "http://services.ws.itim.ibm.com")
        XMLGregorianCalendar date)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param roleDNs
     * @param session
     * @param date
     * @param personDN
     * @return
     *     returns com.ibm.itim.ws.model.WSRequest
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "removeRolesFromPersonReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "removeRolesFromPerson", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.RemoveRolesFromPerson")
    @ResponseWrapper(localName = "removeRolesFromPersonResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.RemoveRolesFromPersonResponse")
    public WSRequest removeRolesFromPerson(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "roleDNs", targetNamespace = "http://services.ws.itim.ibm.com")
        List<String> roleDNs,
        @WebParam(name = "date", targetNamespace = "http://services.ws.itim.ibm.com")
        XMLGregorianCalendar date)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param restoreAccounts
     * @param session
     * @param password
     * @param date
     * @param personDN
     * @return
     *     returns com.ibm.itim.ws.model.WSRequest
     * @throws WSInvalidSessionException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "restorePersonReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "restorePerson", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.RestorePerson")
    @ResponseWrapper(localName = "restorePersonResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.RestorePersonResponse")
    public WSRequest restorePerson(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "restoreAccounts", targetNamespace = "http://services.ws.itim.ibm.com")
        boolean restoreAccounts,
        @WebParam(name = "password", targetNamespace = "http://services.ws.itim.ibm.com")
        String password,
        @WebParam(name = "date", targetNamespace = "http://services.ws.itim.ibm.com")
        XMLGregorianCalendar date)
        throws WSApplicationException, WSInvalidSessionException
    ;

    /**
     * 
     * @param session
     * @param filter
     * @param attrList
     * @return
     *     returns java.util.List<com.ibm.itim.ws.model.WSPerson>
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "searchPersonsFromRootReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "searchPersonsFromRoot", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SearchPersonsFromRoot")
    @ResponseWrapper(localName = "searchPersonsFromRootResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SearchPersonsFromRootResponse")
    public List<WSPerson> searchPersonsFromRoot(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "filter", targetNamespace = "http://services.ws.itim.ibm.com")
        String filter,
        @WebParam(name = "attrList", targetNamespace = "http://services.ws.itim.ibm.com")
        List<String> attrList)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param session
     * @param filter
     * @param attrList
     * @return
     *     returns java.util.List<com.ibm.itim.ws.model.WSPerson>
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "searchPersonsWithITIMAccountReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "searchPersonsWithITIMAccount", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SearchPersonsWithITIMAccount")
    @ResponseWrapper(localName = "searchPersonsWithITIMAccountResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SearchPersonsWithITIMAccountResponse")
    public List<WSPerson> searchPersonsWithITIMAccount(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "filter", targetNamespace = "http://services.ws.itim.ibm.com")
        String filter,
        @WebParam(name = "attrList", targetNamespace = "http://services.ws.itim.ibm.com")
        List<String> attrList)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param wsPerson
     * @param tenantId
     * @throws WSApplicationException
     */
    @WebMethod
    @RequestWrapper(localName = "selfRegister", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SelfRegister")
    @ResponseWrapper(localName = "selfRegisterResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SelfRegisterResponse")
    public void selfRegister(
        @WebParam(name = "wsPerson", targetNamespace = "http://services.ws.itim.ibm.com")
        WSPerson wsPerson,
        @WebParam(name = "tenantId", targetNamespace = "http://services.ws.itim.ibm.com")
        String tenantId)
        throws WSApplicationException
    ;

    /**
     * 
     * @param session
     * @param personDN
     * @return
     *     returns com.ibm.itim.ws.model.WSRequest
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "suspendPersonReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "suspendPerson", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SuspendPerson")
    @ResponseWrapper(localName = "suspendPersonResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SuspendPersonResponse")
    public WSRequest suspendPerson(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param session
     * @param date
     * @param includeAccounts
     * @param personDN
     * @return
     *     returns com.ibm.itim.ws.model.WSRequest
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "suspendPersonAdvancedReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "suspendPersonAdvanced", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SuspendPersonAdvanced")
    @ResponseWrapper(localName = "suspendPersonAdvancedResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SuspendPersonAdvancedResponse")
    public WSRequest suspendPersonAdvanced(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "includeAccounts", targetNamespace = "http://services.ws.itim.ibm.com")
        boolean includeAccounts,
        @WebParam(name = "date", targetNamespace = "http://services.ws.itim.ibm.com")
        XMLGregorianCalendar date)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param session
     * @param date
     * @param personDN
     * @return
     *     returns com.ibm.itim.ws.model.WSRequest
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "synchGeneratedPasswordReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "synchGeneratedPassword", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SynchGeneratedPassword")
    @ResponseWrapper(localName = "synchGeneratedPasswordResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SynchGeneratedPasswordResponse")
    public WSRequest synchGeneratedPassword(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "date", targetNamespace = "http://services.ws.itim.ibm.com")
        XMLGregorianCalendar date)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param session
     * @param notifyByMail
     * @param password
     * @param date
     * @param personDN
     * @return
     *     returns com.ibm.itim.ws.model.WSRequest
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "synchPasswordsReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "synchPasswords", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SynchPasswords")
    @ResponseWrapper(localName = "synchPasswordsResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.SynchPasswordsResponse")
    public WSRequest synchPasswords(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "password", targetNamespace = "http://services.ws.itim.ibm.com")
        String password,
        @WebParam(name = "date", targetNamespace = "http://services.ws.itim.ibm.com")
        XMLGregorianCalendar date,
        @WebParam(name = "notifyByMail", targetNamespace = "http://services.ws.itim.ibm.com")
        boolean notifyByMail)
        throws WSApplicationException, WSLoginServiceException
    ;

    /**
     * 
     * @param targetContainer
     * @param session
     * @param date
     * @param personDN
     * @return
     *     returns com.ibm.itim.ws.model.WSRequest
     * @throws WSLoginServiceException
     * @throws WSApplicationException
     */
    @WebMethod
    @WebResult(name = "transferPersonReturn", targetNamespace = "http://services.ws.itim.ibm.com")
    @RequestWrapper(localName = "transferPerson", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.TransferPerson")
    @ResponseWrapper(localName = "transferPersonResponse", targetNamespace = "http://services.ws.itim.ibm.com", className = "com.ibm.itim.ws.services.TransferPersonResponse")
    public WSRequest transferPerson(
        @WebParam(name = "session", targetNamespace = "http://services.ws.itim.ibm.com")
        WSSession session,
        @WebParam(name = "personDN", targetNamespace = "http://services.ws.itim.ibm.com")
        String personDN,
        @WebParam(name = "targetContainer", targetNamespace = "http://services.ws.itim.ibm.com")
        WSOrganizationalContainer targetContainer,
        @WebParam(name = "date", targetNamespace = "http://services.ws.itim.ibm.com")
        XMLGregorianCalendar date)
        throws WSApplicationException, WSLoginServiceException
    ;

}
